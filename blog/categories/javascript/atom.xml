<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | alexba.in]]></title>
  <link href="http://alexba.in/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://alexba.in/"/>
  <updated>2015-01-26T16:11:20+00:00</updated>
  <id>http://alexba.in/</id>
  <author>
    <name><![CDATA[Alex Bain]]></name>
    <email><![CDATA[alex@alexba.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Source Universal Remote]]></title>
    <link href="http://alexba.in/blog/2013/03/06/open-source-universal-remote/"/>
    <updated>2013-03-06T11:55:00+00:00</updated>
    <id>http://alexba.in/blog/2013/03/06/open-source-universal-remote</id>
    <content type="html"><![CDATA[<p><img src="http://alexba.in/images/posts/universal-remote/transistor.jpg" /></p>

<p>Almost a year ago I decided to teach myself electronics by creating my own WiFi enabled universal remote. Initially I tried to build the project with an Arduino, but later switched to a RaspberryPi. As I've made progress on my project I've open sourced the software I've written and blogged about every step of the process.</p>

<p>To date, I've had over nine thousand unique visitors check out the posts related to this project. Based on the positive feedback I've received and the questions asked, I believe it makes sense to aggregate all of the data I've spread out across numerous blog posts into one guide. Over the coming weeks I'll be creating a step by step guide for building your own RaspberryPi powered universal remote. In addition, I'll be creating and open sourcing additional components of the project such as a printed circuit board and a 3D printable case to enclose the project.</p>

<p>Check out the <a href="http://opensourceuniversalremote.com">Open Source Universal Remote</a> landing page I created for the project. In the coming weeks I'll be adding additional content to that page.</p>

<p>If you have any requests or ideas for this project please don't hesitate to ask in the comments. In addition, if you have hardware engineering experience or industrial design experience and would like to contribute please get in touch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling LIRC from the web]]></title>
    <link href="http://alexba.in/blog/2013/02/23/controlling-lirc-from-the-web/"/>
    <updated>2013-02-23T13:06:00+00:00</updated>
    <id>http://alexba.in/blog/2013/02/23/controlling-lirc-from-the-web</id>
    <content type="html"><![CDATA[<p>In this post I will cover how to create a web interface + API for <a href="http://lirc.org">LIRC</a>, the Linux Infrared Remote Control project. I will be using NodeJS and a RaspberryPi in this post, but the ideas generalize to other languages and hardware. This post will serve as Part 3 of my open source universal remote project posts. If you haven't had an opportunity to read the first two posts, I suggest checking out <a href="/blog/2012/07/08/universal-remote-experiments/">Universal remote experiments</a> (Part 1) and <a href="/blog/2013/01/06/setting-up-lirc-on-the-raspberrypi">Setting up LIRC on the RaspberryPi</a> (Part 2) before proceeding. You may also want to read <a href="/blog/2013/01/15/installing-nodejs-on-your-raspberrypi">Installing NodeJS on your RaspberryPi</a>, where I cover installing NodeJS.</p>

<p>If you're completely new to the RaspberryPi and want to learn more I wrote a <a href="/blog/2013/01/04/raspberrypi-quickstart">RaspberryPi Quickstart</a> post which covers everything from purchasing the parts to configuring the WiFi. Check that out if you're new to the RaspberryPi ecosystem.</p>

<p>With that out of the way, let's get started!</p>

<p><img src="http://alexba.in/images/posts/universal-remote/ir-leds.jpg" class="center" /></p>

<h3>Why a web interface + API?</h3>

<p>LIRC is an awesome open source project that handles all of the low level requirements of sending and receiving Infrared commands from a Linux computer. It's well documented, well supported, and thanks to the work of the open source community there is now a <code>lirc_rpi</code> driver included in the latest version of RaspbianOS. This means that, as long as you're running a RaspberryPi with the latest OS and firmware, LIRC can interface with the RaspberryPi GPIO pins. Fantastic.</p>

<p>Once you have LIRC installed and configured (which I cover in my <a href="/blog/2013/01/06/setting-up-lirc-on-the-raspberrypi">Setting up LIRC on the RaspberryPi</a> post), you can use LIRC executables like <a href="http://www.lirc.org/html/irsend.html">irsend</a> and <a href="http://www.lirc.org/html/irrecord.html">irrecord</a> to send and record IR commands for all your IR devices - right from the command line! This is great fun, but not very user friendly.</p>

<p>I wanted a way to control LIRC from the web. I wanted a web application that enabled me to interact with LIRC from any web connected device. If I had that, I could create a mobile web app for my phone, a regular web app for a desktop, and a RESTful API for web services. The API would give me a way to connect LIRC with any external web service - opening the door for future integrations. All I needed to do was find a way to call LIRC commands from within a web application.</p>

<p>Which brings us to the meat of this post. Getting NodeJS and LIRC to talk.</p>

<p><img src="http://alexba.in/images/posts/universal-remote/breadboard-wires.jpg" class="center" /></p>

<h3>Getting LIRC and NodeJS to talk</h3>

<p>To make LIRC usable from the web I needed a client library in a language I could build a web application in. The client library would provide some way to make calls from the web application to LIRC. This would give me the building blocks I needed to build a web application. The usual web languages include PHP, Python, Ruby, and NodeJS.</p>

<p>For this project I chose to work in NodeJS. If you would prefer to implement a web application in a different language, I found two existing LIRC client libraries. Sadly, neither seem maintained. I found <a href="https://github.com/fugalh/lircr">lircr</a> for Ruby and <a href="http://sourceforge.net/projects/pylirc/">pyLirc</a> for Python.</p>

<p>Since I could not find an existing NodeJS LIRC client library, and the existing libraries I did find were not up to date, I built my own. I created <a href="https://github.com/alexbain/lirc_node">lirc_node</a>, a lightweight NodeJS client library that interfaces with LIRC. v0.0.1 of <code>lirc_node</code> only supports <code>irsend</code>. This allows you to send IR commands to devices that LIRC knows about.</p>

<p>Before trying to install and use <code>lirc_node</code> make sure you have completed these steps:</p>

<ul>
<li>Purchased, setup, and configured a RaspberryPi to join a network</li>
<li>Wired up an IR LED and an IR Receiver to your RaspberryPi</li>
<li>Installed and configured LIRC to interface with your IR LED and IR Receiver</li>
<li>Programmed LIRC to understand your remote controls</li>
<li>Installed NodeJS on your RaspberryPi</li>
</ul>


<p>If you have not completed all of those steps scroll back to the top of this post and check out my earlier posts. I have written detailed step by step guides to get you through each of those steps.</p>

<p>All caught up? Great! We're ready to install a basic web application for LIRC.</p>

<p><img src="http://alexba.in/images/posts/universal-remote/ir-receiver.jpg" class="center" /></p>

<h3>Creating a NodeJS web application using <code>lirc_node</code> and <code>lirc_web</code></h3>

<p>The easiest way to setup a NodeJS web application using <code>lirc_node</code> is to use v0.0.1 of <a href="https://github.com/alexbain/lirc_web">lirc_web</a>, a sample NodeJS application I wrote as a proof of concept for <code>lirc_node</code>. This web application is extremely basic, and only proves that <code>lirc_node</code> works. I have plans to grow this application with additional functionality and an improved interface. You may also use the basic API included in this web application to connect your universal remote with services like <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&amp;hl=en">Tasker</a> or <a href="https://ifttt.com/">IFTTT</a>.</p>

<p><strong>January 17th 2015 Update:</strong> <a href="https://github.com/alexbain/lirc_web">lirc_web</a> is now at v0.0.8 and contains bugfixes and additional functionality. The user interface has been improved since v0.0.1, as well.</p>

<p>To download and install <a href="https://github.com/alexbain/lirc_web">lirc_web</a>:</p>

<pre><code>wget https://github.com/alexbain/lirc_web/archive/master.zip
unzip master.zip
mv lirc_web-master lirc_web
rm master.zip
cd lirc_web
npm install
node app.js
</code></pre>

<p>That should do it. Now, visit <code>http://raspberrypi:3000/</code> (or the IP address of your RaspberryPi) to confirm the sample web application shows all of the remotes and commands LIRC knows about. Clicking any of the links will tell LIRC to send that IR command via the API endpoint.</p>

<p><img src="http://alexba.in/images/posts/universal-remote/lirc_web.jpg" class="center" /></p>

<p><strong>November 2nd 2013 Update:</strong> I have posted a follow up post that discusses how to ensure the <code>lirc_web</code> project automatically starts on boot and is accessible via port 80. Check out <a href="http://alexba.in/blog/2013/11/02/lirc-web-nginx-and-upstart/">Running lirc_web with Nginx and Upstart</a> to learn more.</p>

<h3>Success!</h3>

<p>At this point, assuming you've been able to get each step working, you should have a web application you can use to control any IR device that LIRC knows about.</p>

<h3>What's next?</h3>

<p>In the coming months I hope to:</p>

<ul>
<li>Create an open hardware schematic and PCB board that anyone can use for the hardware.</li>
<li>3D print an enclosure for the RaspberryPi + expansion board.</li>
<li>Improve the web application and give it a proper mobile web interface.</li>
<li>Write about how to connect <a href="https://github.com/alexbain/lirc_web">lirc_web</a> to Tasker or IFTTT.</li>
</ul>


<p>If you have any questions, suggestions, or run into any issues - please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing NodeJS on your RaspberryPi]]></title>
    <link href="http://alexba.in/blog/2013/01/15/installing-nodejs-on-your-raspberrypi/"/>
    <updated>2013-01-15T12:04:00+00:00</updated>
    <id>http://alexba.in/blog/2013/01/15/installing-nodejs-on-your-raspberrypi</id>
    <content type="html"><![CDATA[<p>Here's how I installed <a href="http://nodejs.org/">NodeJS</a> on my RaspberryPi:</p>

<h3>Upgrade to the latest OS / Firmware</h3>

<p>If you have not already upgraded to the latest version of Raspbian OS and the
latest RaspberryPi firmware, I recommend following my <a href="http://alexba.in/blog/2013/01/04/raspberrypi-quickstart/">RaspberryPi Quickstart</a>.</p>

<h3>Getting and Compiling NodeJS</h3>

<p>Once your RaspberryPi is up to date, here's how to download and compile NodeJS:</p>

<pre><code># Install some prerequisites
sudo apt-get install python g++ make

# Grab the latest version of NodeJS
mkdir ~/nodejs &amp;&amp; cd $_
wget -N http://nodejs.org/dist/node-latest.tar.gz
tar xzvf node-latest.tar.gz &amp;&amp; cd `ls -rd node-v*`

# Compile and install to your RaspberryPi
./configure
make
sudo make install
</code></pre>

<p>Please note that it takes about two hours to compile NodeJS.</p>

<h3>Confirming Installation</h3>

<p>You can confirm that NodeJS was installed correctly by running:</p>

<pre><code>node -v
npm --help
</code></pre>

<p>That's it! You're ready to begin development.</p>

<h3>Additional Reading:</h3>

<p>If you'd like to do some additional reading about NodeJS or ways to access the
GPIO pins on the RaspberryPi, check out:</p>

<ul>
<li><a href="http://nodejs.org/">NodeJS</a> - NodeJS home page</li>
<li><a href="https://github.com/rakeshpai/pi-gpio">pi-gpio</a> - "node.js based library to help access the GPIO of the Raspberry Pi"</li>
<li><a href="https://github.com/EnotionZ/GpiO">GpiO</a> - "Talk to your Raspberry Pi's GPIO"</li>
</ul>


<p>If you have any other recommended resources please let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spreadsheets to Websites]]></title>
    <link href="http://alexba.in/blog/2012/12/07/spreadsheets-to-websites/"/>
    <updated>2012-12-07T10:29:00+00:00</updated>
    <id>http://alexba.in/blog/2012/12/07/spreadsheets-to-websites</id>
    <content type="html"><![CDATA[<p>This morning I came across a two interesting JavaScript libraries designed to help
make Google Spreadsheets a data source for websites. Given how simple it is to
get started creating a spreadsheet it seems like a great way to make that data
available for public viewing.</p>

<p>I can imagine this being extremely useful for someone who already maintains a
spreadsheet with carefully tabulated and calculated data who isn't interested
in repeatedly exporting / importing it into a database for web viewing.</p>

<h3>Tabletop</h3>

<blockquote><p>Tabletop takes a Google Spreadsheet and makes it easily accessible through Javascript.</p></blockquote>

<p><a href="http://builtbybalance.com/Tabletop/">http://builtbybalance.com/Tabletop/</a></p>

<h3>Sheetsee</h3>

<blockquote><p>Sheetsee.js is a javascript library mashup that allows you to fill a website with content
from a Google Spreadsheet. The web content and visualizations will update with every
auto save by Google.</p></blockquote>

<p><a href="https://github.com/jllord/sheetsee.js">https://github.com/jllord/sheetsee.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing for missing images in JavaScript]]></title>
    <link href="http://alexba.in/blog/2012/07/07/testing-for-missing-images-in-javascript/"/>
    <updated>2012-07-07T23:08:00+00:00</updated>
    <id>http://alexba.in/blog/2012/07/07/testing-for-missing-images-in-javascript</id>
    <content type="html"><![CDATA[<p>Recently I had to determine if an image URL was properly rendering or not. Since
this image URL was provided by a user there was a chance that it had been
deleted or moved since they first set it. In that case I wanted to show a
different image - perhaps a "missing user" image - rather than just an empty
box.</p>

<p>My solution was to bind a callback to the <code>onerror</code> event that fires on an
<code>Image</code> object if the image source could not be loaded. By binding a callback
to this error I was able to replace a missing image with an image of my choice.</p>

<p>Here's a sample implementation that binds a callback onto the <code>onerror</code> event:</p>

<pre><code class="javascript">
var checkForMissingImage = function (url, callback) {

  // Create an Image object in memory
  var img = new Image();

  // Bind the callback to the onerror event
  img.onerror = function() {
    callback();
  };

  // Set the src of the image to the url provided
  img.src = url;

};
</code></pre>

<p>Here's an example that involves replacing all images with class userpic on a page.</p>

<p>``` html</p>

<!-- Userpic that will render as a missing image and needs replacing -->


<p><img src="http://brokenhost.com/does_not_exist.png" class="userpic" /></p>

<!-- Userpic that will render properly -->


<p><img src="http://placekitten.com.s3.amazonaws.com/homepage-samples/200/287.jpg" class="userpic" /></p>

<pre><code></code></pre>

<p>$(function() {</p>

<p>  // Define a custom image to replace all missing images with
  var replacementImage = 'http://placekitten.com.s3.amazonaws.com/homepage-samples/408/287.jpg';</p>

<p>  // Find all userpics on the page
  $('.userpic').each(function (i, userpic) {</p>

<pre><code>// Create a cached reference of this userpic
var $userpic = $(userpic);

// Get the source of the userpic
var src = $userpic.attr('src');

// Check to see if this image still exists. If it does not exist, execute
// the callback function and replace it.
checkForMissingImage(src, function() {

  // Update the missing image with our replacement image.
  $userpic.attr('src', replacementImage);

});
</code></pre>

<p>  });</p>

<p>});</p>

<p>```</p>

<p>As <code>onerror</code> support isn't universal across every browser this should be
considered a visual enhancement for users with modern browsers.</p>
]]></content>
  </entry>
  
</feed>
