<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: raspberrypi | alexba.in]]></title>
  <link href="http://alexbain.github.com/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://alexbain.github.com/"/>
  <updated>2013-01-05T13:55:41-08:00</updated>
  <id>http://alexbain.github.com/</id>
  <author>
    <name><![CDATA[Alex Bain]]></name>
    <email><![CDATA[alex@alexba.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RaspberryPi Quickstart]]></title>
    <link href="http://alexbain.github.com/blog/2013/01/04/raspberrypi-quickstart/"/>
    <updated>2013-01-04T20:08:00-08:00</updated>
    <id>http://alexbain.github.com/blog/2013/01/04/raspberrypi-quickstart</id>
    <content type="html"><![CDATA[<p>I recently had the opportunity to purchase and setup a second RaspberryPi system. Here's a very brief shopping list and collection of links to get your own RaspberryPi system setup.</p>

<h3>Parts List</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/B009SQQF9C/ref=oh_details_o01_s00_i01">RaspberryPi</a> - 512MB version</li>
<li><a href="http://www.amazon.com/gp/product/B008TCUXLW/ref=oh_details_o01_s01_i01">Enclosure for the RaspberryPi</a> - Clear and contains cutous for all of the ports + GPIO pins.</li>
<li><a href="http://www.amazon.com/gp/product/B003X26PMO/ref=oh_details_o01_s01_i02">WiFi Card</a> - Drivers are included in the latest Raspbian distribution.</li>
<li><a href="http://www.amazon.com/gp/product/B003VNKNEG/ref=oh_details_o01_s01_i03">8GB Class 10 SD card</a> - Class 10 cards have a fast read / write speed.</li>
<li><a href="http://www.amazon.com/gp/product/B003ES5ZSW/ref=oh_details_o01_s00_i00">USB A to USB MicroB cable</a> - The 'power cable' for the RaspberryPi</li>
<li><a href="http://www.amazon.com/gp/product/B005CG2ATQ/ref=oh_details_o01_s01_i00">USB power supply</a> - High powered USB power supply to drive the RaspberryPi + WiFi card.</li>
<li><a href="http://www.amazon.com/AmazonBasics-High-Speed-HDMI-Cable-Meters/dp/B003L1ZYYM">HDMI cable</a> - HDMI cable to connect to HDTV / monitor.</li>
</ul>


<h3>Setting up the SD card</h3>

<ol>
<li>Download the latest <a href="http://www.raspberrypi.org/downloads">Rasbian linux image</a>.</li>
<li>Setup the SD card by following the <a href="http://elinux.org/RPi_Easy_SD_Card_Setup">RPi Easy SD Card Setup</a> guide.</li>
</ol>


<h3>Booting it all up</h3>

<p>Plug everything in, boot up the system. If you're planning to SSH into the RaspberryPi via Ethernet (instead of using a keyboard/mouse/monitor) you'll have to log into your router and determine what it's IP address is.</p>

<h3>Setting up the WiFi</h3>

<p>Assuming everything booted up okay, you're ready to setup the wireless. To setup the wireless card to connect to your WPA/WPA2 secured wireless network, edit <code>/etc/network/interfaces</code> and add this to the bottom of the file. You may need to remove some existing configuration for <code>wlan0</code>.</p>

<pre><code>allow-hotplug wlan0
auto wlan0
iface wlan0 inet dhcp
    wpa-ssid YOUR_SSID
    wpa-psk YOUR_PASSWORD
</code></pre>

<p>Save this file, and run:</p>

<pre><code>sudo ifdown wlan0
sudo ifup wlan0
</code></pre>

<p>Run <code>ifconfig</code> and you should see that <code>wlan0</code> has an IP address.</p>

<h3>Setting up NTP</h3>

<p>Accurate time is useful.</p>

<pre><code>sudo apt-get install ntpdate
sudo ntpdate -u ntp.ubuntu.com
</code></pre>

<h3>Updating Raspbian OS</h3>

<p>After everything is setup you'll probably want to update Raspbian to the latest packages and version.</p>

<pre><code>sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade
</code></pre>

<h3>Updating the RaspberryPi's firmware</h3>

<p>To update the firmware to the latest version, we'll use <a href="https://www.github.com/Hexxeh/rpi-update">Hexxeh's rpi-update script</a>.</p>

<pre><code>sudo apt-get install git-core
sudo wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update &amp;&amp; sudo chmod +x /usr/bin/rpi-update
sudo rpi-update
</code></pre>

<h3>You're done!</h3>

<p>At this point you should be completely setup and operational.</p>

<p>If you had any troubles with this please let me know in the comments.</p>

<h3>More reading</h3>

<p>Here are some resources to do further reading:</p>

<ul>
<li><a href="http://elinux.org/RPi_Community">http://elinux.org/RPi_Community</a></li>
<li><a href="http://www.raspberrypi.org/phpBB3/">http://www.raspberrypi.org/phpBB3/</a></li>
<li>Should I add a link here? Let me know.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Universal remote experiments]]></title>
    <link href="http://alexbain.github.com/blog/2012/07/08/universal-remote-experiments/"/>
    <updated>2012-07-08T09:51:00-07:00</updated>
    <id>http://alexbain.github.com/blog/2012/07/08/universal-remote-experiments</id>
    <content type="html"><![CDATA[<p>Over the past few months I've decided to teach myself a bit about embedded
microcontrollers and electronics. I've never worked with hardware before and,
after a bit of Googling, found an amazing Maker / Open Hardware movement going
on that I could leverage to help bootstrap my ideas.</p>

<p>Since I've found the best way to motivate myself is with a concrete project I
decided that, for my first project, I wanted to build a universal remote that I
could control from my phone. I have a Harmony remote, which I use regularly,
but it's limited by line of sight and requires customization through a
cumbersome software interface.</p>

<p>My initial requirements were:</p>

<ul>
<li>Must be small enough to place discreetly in the room</li>
<li>Must be WiFi enabled</li>
<li>Must have great IR range and coverage</li>
<li>Must be able to learn existing commands</li>
<li>Must have a responsive web interface</li>
</ul>


<h4>Version 1: Arduino</h4>

<p>The first prototype I built was using an <a href="http://arduino.cc">Arduino Uno</a> microcontroller along with
<a href="http://www.arcfn.com/2009/08/multi-protocol-infrared-remote-library.html">Ken Shirriff's</a> multi protocol IR library. I had wired a 940nm IR LED to one
of the Arduino's pins and was able to get about two feet of range out of it.</p>

<p>Next, I extended the code and attached a <a href="http://www.sparkfun.com/products/10822">Roving Networks RN-XV</a> WiFi chip to
my project so it was WiFi enabled. So far so good. I could now send or receive
IR commands (relatively well, it wasn't perfect) over Wifi with about a two foot
range for the IR signal. I also had to hard code the WiFi credentials which meant
the device wasn't very portable, but at least it worked. This was version 1.1.</p>

<p>Version 1.2 was an updated hardware schematic that added a 2N2222 transistor to
the mix. Using a transistor meant that the output from the Arduino's pin was not
trying to power the LED but just telling a transitor to switch current on and off.
Since the transistor switches current significantly better than the output
pin of the Arduino I was able to extend the range for the IR blaster to about 15ft.
This change was inspired by open source schematics like <a href="http://www.ladyada.net/images/tvbgone/schematic.jpg">TV-B-Gone</a>.</p>

<p>Version 1.3 was to be the version with the web interface. This was where I realized
the limitations of the Arduino platform. I could not easily run a WiFi libray,
an IR library, and a web server off of an 8bit micro controller. I simply didn't
have the resources.</p>

<p>I had considered a few alternatives:</p>

<ul>
<li>Run a webserver on my laptop and just send commands to/from the Arduino</li>
<li>Run a webserver on the internet and relay commands that way</li>
<li>Purchase a device like a <a href="http://raspberrypi.org/">RaspberryPi</a> or <a href="http://beagleboard.org/bone/">Beaglebone</a> and run the web
server on that device. Communicate with the Arduino perhaps via XBee or over WiFi.</li>
</ul>


<p>Ultimately I decided that adding a second device increased the complexity of the
project beyond what I wanted. So, I scrapped the idea of using an Arduino and I'm
starting over with a <a href="http://raspberrypi.org/">RaspberryPi</a>.</p>

<h4>Version 2: RaspberryPi</h4>

<p>The <a href="http://raspberrypi.org/">RaspberryPi</a> is a completely different beast than the <a href="http://arduino.cc">Arduino</a>. The <a href="http://raspberrypi.org/">RaspberryPi</a>
is about as powerful as a mobile phone. It's got an ARM processor,
ethernet port, RAM, SD card for storage, and a bunch of <a href="http://en.wikipedia.org/wiki/General_Purpose_Input/Output">GPIO</a> pins for a hardware
interface.</p>

<p>So first up was finding an IR software package (designed for a Linux OS) that
could handle the transmission and receiving of IR signals. This lead me to
<a href="http://www.lirc.org/">LIRC</a> - the Linux Infrared Remote Control project. This project has been
around for a while, has a bunch of hardware schematics available (sending and
receiving) for it, and is open source. Perfect.</p>

<p>This lead me to getting LIRC working on my RaspberryPi. Luckily a chap who goes
by the name <a href="http://aron.ws/projects/lirc_rpi/">ar0n</a> has already opened a <a href="https://github.com/raspberrypi/linux/pull/38">pull request</a> that adds preliminary
LIRC support to the RaspberryPi linux kernel.</p>

<p>So, at this very moment, I am attempting to recompile the RaspberryPi linux kernel
with LIRC support. Once this step is done I'll wire up some hardware to test
sending and receiving. Once that works I should be back to "adding a web platform"
which will be significantly easier when powered by an entire Linux stack.</p>

<p>I'll post another update down the road once I've gotten this step working.</p>
]]></content>
  </entry>
  
</feed>
