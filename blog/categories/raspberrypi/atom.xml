<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: raspberrypi | alexba.in]]></title>
  <link href="http://alexba.in/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://alexba.in/"/>
  <updated>2013-03-04T10:14:06-08:00</updated>
  <id>http://alexba.in/</id>
  <author>
    <name><![CDATA[Alex Bain]]></name>
    <email><![CDATA[alex@alexba.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Controlling LIRC from the web]]></title>
    <link href="http://alexba.in/blog/2013/02/23/controlling-lirc-from-the-web/"/>
    <updated>2013-02-23T13:06:00-08:00</updated>
    <id>http://alexba.in/blog/2013/02/23/controlling-lirc-from-the-web</id>
    <content type="html"><![CDATA[<p>In this post I will cover how to create a web interface + API for <a href="http://lirc.org">LIRC</a>, the Linux Infrared Remote Control project. I will be using NodeJS and a RaspberryPi in this post, but the ideas generalize to other languages and hardware. This post will serve as Part 3 of my open source universal remote project posts. If you haven't had an opportunity to read the first two posts, I suggest checking out <a href="/blog/2012/07/08/universal-remote-experiments/">Universal remote experiments</a> (Part 1) and <a href="/blog/2013/01/06/setting-up-lirc-on-the-raspberrypi">Setting up LIRC on the RaspberryPi</a> (Part 2) before proceeding. You may also want to read <a href="/blog/2013/01/15/installing-nodejs-on-your-raspberrypi">Installing NodeJS on your RaspberryPi</a>, where I cover installing NodeJS.</p>

<p>If you're completely new to the RaspberryPi and want to learn more I wrote a <a href="/blog/2013/01/04/raspberrypi-quickstart">RaspberryPi Quickstart</a> post which covers everything from purchasing the parts to configuring the WiFi. Check that out if you're new to the RaspberryPi ecosystem.</p>

<p>With that out of the way, let's get started!</p>

<p><img src="http://alexba.in/images/posts/universal-remote/ir-leds.jpg" class="center" /></p>

<h3>Why a web interface + API?</h3>

<p>LIRC is an awesome open source project that handles all of the low level requirements of sending and receiving Infrared commands from a Linux computer. It's well documented, well supported, and thanks to the work of the open source community there is now a <code>lirc_rpi</code> driver included in the latest version of RaspbianOS. This means that, as long as you're running a RaspberryPi with the latest OS and firmware, LIRC can interface with the RaspberryPi GPIO pins. Fantastic.</p>

<p>Once you have LIRC installed and configured (which I cover in my <a href="/blog/2013/01/06/setting-up-lirc-on-the-raspberrypi">Setting up LIRC on the RaspberryPi</a> post), you can use LIRC executables like <a href="http://www.lirc.org/html/irsend.html">irsend</a> and <a href="http://www.lirc.org/html/irrecord.html">irrecord</a> to send and record IR commands for all your IR devices - right from the command line! This is great fun, but not very user friendly.</p>

<p>I wanted a way to control LIRC from the web. I wanted a web application that enabled me to interact with LIRC from any web connected device. If I had that, I could create a mobile web app for my phone, a regular web app for a desktop, and a RESTful API for web services. The API would give me a way to connect LIRC with any external web service - opening the door for future integrations. All I needed to do was find a way to call LIRC commands from within a web application.</p>

<p>Which brings us to the meat of this post. Getting NodeJS and LIRC to talk.</p>

<p><img src="http://alexba.in/images/posts/universal-remote/breadboard-wires.jpg" class="center" /></p>

<h3>Getting LIRC and NodeJS to talk</h3>

<p>To make LIRC usable from the web I needed a client library in a language I could build a web application in. The client library would provide some way to make calls from the web application to LIRC. This would give me the building blocks I needed to build a web application. The usual web languages include PHP, Python, Ruby, and NodeJS.</p>

<p>For this project I chose to work in NodeJS. If you would prefer to implement a web application in a different language, I found two existing LIRC client libraries. Sadly, neither seem maintained. I found <a href="https://github.com/fugalh/lircr">lircr</a> for Ruby and <a href="http://sourceforge.net/projects/pylirc/">pyLirc</a> for Python.</p>

<p>Since I could not find an existing NodeJS LIRC client library, and the existing libraries I did find were not up to date, I built my own. I created <a href="https://github.com/alexbain/lirc_node">lirc_node</a>, a lightweight NodeJS client library that interfaces with LIRC. v0.0.1 of <code>lirc_node</code> only supports <code>irsend</code>. This allows you to send IR commands to devices that LIRC knows about.</p>

<p>Before trying to install and use <code>lirc_node</code> make sure you have completed these steps:</p>

<ul>
<li>Purchased, setup, and configured a RaspberryPi to join a network</li>
<li>Wired up an IR LED and an IR Receiver to your RaspberryPi</li>
<li>Installed and configured LIRC to interface with your IR LED and IR Receiver</li>
<li>Programmed LIRC to understand your remote controls</li>
<li>Installed NodeJS on your RaspberryPi</li>
</ul>


<p>If you have not completed all of those steps scroll back to the top of this post and check out my earlier posts. I have written detailed step by step guides to get you through each of those steps.</p>

<p>All caught up? Great! We're ready to install a basic web application for LIRC.</p>

<p><img src="http://alexba.in/images/posts/universal-remote/ir-receiver.jpg" class="center" /></p>

<h3>Creating a NodeJS web application using <code>lirc_node</code> and <code>lirc_web</code></h3>

<p>The easiest way to setup a NodeJS web application using <code>lirc_node</code> is to use v0.0.1 of <a href="https://github.com/alexbain/lirc_web">lirc_web</a>, a sample NodeJS application I wrote as a proof of concept for <code>lirc_node</code>. This web application is extremely basic, and only proves that <code>lirc_node</code> works. I have plans to grow this application with additional functionality and an improved interface. You may also use the basic API included in this web application to connect your universal remote with services like <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&amp;hl=en">Tasker</a> or <a href="https://ifttt.com/">IFTTT</a>.</p>

<p>To download and install <a href="https://github.com/alexbain/lirc_web">lirc_web</a>:</p>

<pre><code>wget https://github.com/alexbain/lirc_web/archive/master.zip
unzip master.zip
mv lirc_web-master lirc_web
rm master.zip
cd lirc_web
npm install
node app.js
</code></pre>

<p>That should do it. Now, visit <code>http://raspberrypi:3000/</code> (or the IP address of your RaspberryPi) to confirm the sample web application shows all of the remotes and commands LIRC knows about. Clicking any of the links will tell LIRC to send that IR command via the API endpoint.</p>

<p><img src="http://alexba.in/images/posts/universal-remote/lirc_web.jpg" class="center" /></p>

<h3>Success!</h3>

<p>At this point, assuming you've been able to get each step working, you should have a web application you can use to control any IR device that LIRC knows about.</p>

<h3>What's next?</h3>

<p>In the coming months I hope to:</p>

<ul>
<li>Create an open hardware schematic and PCB board that anyone can use for the hardware.</li>
<li>3D print an enclosure for the RaspberryPi + expansion board.</li>
<li>Improve the web application and give it a proper mobile web interface.</li>
<li>Write about how to connect <a href="https://github.com/alexbain/lirc_web">lirc_web</a> to Tasker or IFTTT.</li>
</ul>


<p>If you have any questions, suggestions, or run into any issues - please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing NodeJS on your RaspberryPi]]></title>
    <link href="http://alexba.in/blog/2013/01/15/installing-nodejs-on-your-raspberrypi/"/>
    <updated>2013-01-15T12:04:00-08:00</updated>
    <id>http://alexba.in/blog/2013/01/15/installing-nodejs-on-your-raspberrypi</id>
    <content type="html"><![CDATA[<p>Here's how I installed <a href="http://nodejs.org/">NodeJS</a> on my RaspberryPi:</p>

<h3>Upgrade to the latest OS / Firmware</h3>

<p>If you have not already upgraded to the latest version of Raspbian OS and the
latest RaspberryPi firmware, I recommend following my <a href="http://alexba.in/blog/2013/01/04/raspberrypi-quickstart/">RaspberryPi Quickstart</a>.</p>

<h3>Getting and Compiling NodeJS</h3>

<p>Once your RaspberryPi is up to date, here's how to download and compile NodeJS:</p>

<pre><code># Install some prerequisites
sudo apt-get install python g++ make

# Grab the latest version of NodeJS
mkdir ~/nodejs &amp;&amp; cd $_
wget -N http://nodejs.org/dist/node-latest.tar.gz
tar xzvf node-latest.tar.gz &amp;&amp; cd `ls -rd node-v*`

# Compile and install to your RaspberryPi
./configure
make
sudo make install
</code></pre>

<p>Please note that it takes about two hours to compile NodeJS.</p>

<h3>Confirming Installation</h3>

<p>You can confirm that NodeJS was installed correctly by running:</p>

<pre><code>node -v
npm --help
</code></pre>

<p>That's it! You're ready to begin development.</p>

<h3>Additional Reading:</h3>

<p>If you'd like to do some additional reading about NodeJS or ways to access the
GPIO pins on the RaspberryPi, check out:</p>

<ul>
<li><a href="http://nodejs.org/">NodeJS</a> - NodeJS home page</li>
<li><a href="https://github.com/rakeshpai/pi-gpio">pi-gpio</a> - "node.js based library to help access the GPIO of the Raspberry Pi"</li>
<li><a href="https://github.com/EnotionZ/GpiO">GpiO</a> - "Talk to your Raspberry Pi's GPIO"</li>
</ul>


<p>If you have any other recommended resources please let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use your RaspberryPi to power a company dashboard]]></title>
    <link href="http://alexba.in/blog/2013/01/07/use-your-raspberrypi-to-power-a-company-dashboard/"/>
    <updated>2013-01-07T15:51:00-08:00</updated>
    <id>http://alexba.in/blog/2013/01/07/use-your-raspberrypi-to-power-a-company-dashboard</id>
    <content type="html"><![CDATA[<p>Here are five steps to follow if you want to start using a RaspberryPi to power a company dashboard. I've just finished putting this together at my office. We're using <a href="http://www.geckoboard.com">Geckoboard</a> for the web interface:</p>

<p><img class="center" src="http://alexba.in/images/posts/raspberrypi-dashboard.jpg" /></p>

<p><img class="center" src="http://alexba.in/images/posts/raspberrypi-dashboard-2.jpg" /></p>

<h3>0: Make sure your RaspberryPi is fully updated</h3>

<p>Before you get started I highly recommend you follow my <a href="/blog/2013/01/04/raspberrypi-quickstart/">RaspberryPi Quickstart</a> guide to get your RaspberryPi updated to the latest OS and Firmware. That post also includes links to the case and peripherals I purchased for this project.</p>

<h3>1: Install Chromium</h3>

<p>First, you'll want to install Chromium on your RaspberryPi. We'll be using Chromium to load the dashboard. I've also included the <code>ttf-mscorefonts-installer</code> package so things render nicely.</p>

<pre><code>sudo apt-get install chromium ttf-mscorefonts-installer
</code></pre>

<h3>2: Boot into X11 automatically</h3>

<p>You'll want to make sure your RaspberryPi immediately boots into X11.</p>

<pre><code>sudo raspi-config
</code></pre>

<p>Scroll down to <code>boot_behavior</code> and hit enter. Make sure "Yes" is marked and hit enter again.</p>

<p>You're done here, so scroll to Finish (right arrow key) and hit enter.</p>

<h3>3: Start Chromium on boot</h3>

<p>Third, you'll want to make sure Chromium starts in kiosk (full screen, no user interface) as soon as your RaspberryPi boots up.</p>

<p>Create (or modify) <code>~/.config/lxsession/LXDE/autostart</code> and add the line:</p>

<pre><code>chromium --kiosk http://url_to_your_dashboard.com --incognito
</code></pre>

<p>Kiosk mode boots Chromium into full screen mode, by default. Incognito mode prevents a "Chrome did not shutdown cleanly" message from appearing on the top if the RaspberryPi loses power.</p>

<h3>4: Make sure the screen does not go to sleep</h3>

<p>Dashboards aren't very useful if the screen goes into standy after ten minutes.</p>

<p>Edit <code>/etc/xdg/lxsession/LXDE/autostart</code> and make sure the <code>@xscreensaver</code> line is commented out. In addition, we'll be adding three options that prevent the screen from going blank:</p>

<pre><code>#@xscreensaver -no-splash
@xset s off
@xset -dpms
@xset s noblank
</code></pre>

<p>I also needed to modify <code>/etc/lightdm/lightdm.conf</code>. Add this line to the <code>[SeatDefaults]</code> section:</p>

<pre><code>xserver-command=X -s 0 dpms
</code></pre>

<h3>5: Hide the mouse cursor</h3>

<p>There's no reason to keep the mouse cursor stuck in the middle of the screen.  We'll use the unclutter utility to hide it after boot.</p>

<pre><code>sudo apt-get install unclutter
</code></pre>

<p>You'll need to add this to your <code>~/.config/lxsession/LXDE/autostart</code> file:</p>

<pre><code>unclutter -idle 0
</code></pre>

<h3>Enjoy!</h3>

<p>Reboot your RaspberryPi and it should:</p>

<ul>
<li>Boot directly into X11</li>
<li>Start Chromium in kiosk mode and load up your dashboard</li>
<li>Prevent the screen from going to sleep after 10 minutes</li>
<li>Hide the mouse cursor</li>
</ul>


<p>Please let me know if you have any questions or comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up LIRC on the RaspberryPi]]></title>
    <link href="http://alexba.in/blog/2013/01/06/setting-up-lirc-on-the-raspberrypi/"/>
    <updated>2013-01-06T08:38:00-08:00</updated>
    <id>http://alexba.in/blog/2013/01/06/setting-up-lirc-on-the-raspberrypi</id>
    <content type="html"><![CDATA[<p><strong>March 4th Update:</strong> I've written a follow up post that describes how to control your RaspberryPi universal remote from the web. Please check out <a href="/blog/2013/02/23/controlling-lirc-from-the-web/">Controlling LIRC from the web</a> for instructions on how to install and configure the software.</p>

<h3>Preface</h3>

<p>In July 2012 I wrote a post called <a href="/blog/2012/07/08/universal-remote-experiments/">Universal remote experiments</a> about creating a web controlled universal remote from the electronics up. The first platform I started with was an Arduino Uno. After much experimentation I learned that asking an Arduino to maintain a WiFi connection, maintain a TCP socket with a host computer, and send/receive IR signals was a bit much. With the limited memory and storage I had a hard time managing memory and keeping the system stable. I was, however, able to build a functional prototype:</p>

<p><img src="http://alexba.in/images/posts/arduino-ir.jpg" class="center" /></p>

<p>At the end of that post I had decided to rebuild the project on a RaspberryPi. I chose the RaspberryPi because I wanted a single device to host a web server in addition to being able to handle the IR transmitting and receiving. Given that the RaspberryPi runs Linux I could rely on it's stable TCP/IP implementation and use open source software packages like nginx and NodeJS to build a web application.</p>

<p>This post will serve as 'part two' of that project and cover how to install and configure LIRC on a RaspberryPi.</p>

<h3>LIRC - Linux Infrared Remote Control</h3>

<p><a href="http://www.lirc.org/">LIRC</a> is a mature and stable open source library that provides the ability to send and receive IR commands. Thanks to the contributions of <a href="http://aron.ws/">ar0n</a>, LIRC support is now included by default in the latest version of Raspbian OS. If you'd like to see the details of the RaspberryPi GPIO integration check out the <a href="https://github.com/raspberrypi/linux/pull/152">pull request</a> he opened for it a while back.</p>

<h3>Setting up LIRC on the RaspberryPi</h3>

<p>Getting LIRC setup on the RaspberryPi is significantly easier now than it was six months ago.</p>

<p>You must be running on the latest firmware and OS for this guide to work. If you're new to the RaspberryPi, or you haven't upgraded to the latest firmware and OS, I recommend following my <a href="/blog/2013/01/04/raspberrypi-quickstart/">RaspberryPi Quickstart</a> guide to get your RaspberryPi up and running on the latest OS and firmware.</p>

<p>First, we'll need to install and configure LIRC to run on the RaspberryPi:</p>

<pre><code>sudo apt-get install lirc
</code></pre>

<p>You have to modify two files before you can start testing the receiver and IR LED. I modified these files based on a thread I found on the RaspberryPi forums. If you would like to read more about these changes please check out the <a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=45&amp;t=7798&amp;start=100">LIRC GPIO driver for homebrew adapter</a> thread. In particular, read through the posts by <a href="http://www.raspberrypi.org/phpBB3/memberlist.php?mode=viewprofile&amp;u=16815">rudiratlos</a> on page five, as he posts his configuration files.</p>

<p>Add this to your <code>/etc/modules</code> file:</p>

<pre><code>lirc_dev
lirc_rpi gpio_in_pin=23 gpio_out_pin=22
</code></pre>

<p>Change your <code>/etc/lirc/hardware.conf</code> file to:</p>

<pre><code>########################################################
# /etc/lirc/hardware.conf
#
# Arguments which will be used when launching lircd
LIRCD_ARGS="--uinput"

# Don't start lircmd even if there seems to be a good config file
# START_LIRCMD=false

# Don't start irexec, even if a good config file seems to exist.
# START_IREXEC=false

# Try to load appropriate kernel modules
LOAD_MODULES=true

# Run "lircd --driver=help" for a list of supported drivers.
DRIVER="default"
# usually /dev/lirc0 is the correct setting for systems using udev
DEVICE="/dev/lirc0"
MODULES="lirc_rpi"

# Default configuration files for your hardware if any
LIRCD_CONF=""
LIRCMD_CONF=""
########################################################
</code></pre>

<p>Now restart <code>lircd</code> so it picks up these changes:</p>

<pre><code>sudo /etc/init.d/lirc stop
sudo /etc/init.d/lirc start
</code></pre>

<h3>Wiring up the IR transceiver</h3>

<p>To send and receive IR signals from your RaspberryPi you'll need to wire up an IR LED and an IR receiver and tell LIRC where to find them. Here are the parts I purchased for my own project:</p>

<ul>
<li><a href="https://www.adafruit.com/products/387">940nm IR LED</a> - Bright and tuned to 940nm wavelength</li>
<li><a href="https://www.adafruit.com/products/157">38khz IR Receiver</a> - Receives IR signals at remote control frequencies</li>
<li><a href="https://www.adafruit.com/products/756">PN2222 Transistor</a> - Transistor to help drive IR LED</li>
<li><a href="https://www.sparkfun.com/products/8374">10k Ohm resistor</a> - Resistor that goes between rPi GPIO and the PN2222 transistor</li>
</ul>


<p>If you don't already have wires and a breadboard to prototype with, you may be interested in:</p>

<ul>
<li><a href="http://adafruit.com/products/942">Mounting plate + breadboard</a> - A mounting plate + breadboard for your RaspberryPi</li>
<li><a href="http://adafruit.com/products/914">Adafruit Pi Cobbler Breakout Kit</a> - Breakout kit for getting the GPIO pins onto the breadboard</li>
<li><a href="https://www.adafruit.com/products/153">Breadboard wire bundle</a> - Bundle of wires to use in the breadboard</li>
</ul>


<p>For this project I wired up the IR LED to GPIO pin 22 and the IR Receiver to GPIO pin 23. You'll see that mentioned in the <code>/etc/modules</code> file above.</p>

<p>Please check out these diagrams for information and schematics about how to wire everything up:</p>

<ul>
<li><a href="http://aron.ws/projects/lirc_rpi/">RaspberryPi lirc_rpi</a> - Contains hardware and schematics for the raspberryPi</li>
<li><a href="http://www.ladyada.net/make/tvbgone/design.html">TV-B-Gone Schematic</a> - Info on wiring up IR leds / receivers</li>
<li><a href="http://www.instructables.com/files/deriv/FJA/5B1M/H2WERJ0U/FJA5B1MH2WERJ0U.LARGE.jpg">GPIO pinout for RaspberryPi</a> - GPIO pinout diagram</li>
</ul>


<p>Here's a picture of my RaspberryPi with all of the components wired up and working:</p>

<p><img src="http://alexba.in/images/posts/raspberrypi-ir.jpg" class="center" /></p>

<h3>Testing the IR receiver</h3>

<p>Testing the IR receiver is relatively straightforward.</p>

<p>Run these two commands to stop <code>lircd</code> and start outputting raw data from the IR receiver:</p>

<pre><code>sudo /etc/init.d/lirc stop
mode2 -d /dev/lirc0
</code></pre>

<p>Point a remote control at your IR receiver and press some buttons. You should see something like this:</p>

<pre><code>space 16300
pulse 95
space 28794
pulse 80
space 19395
pulse 83
space 402351
pulse 135
space 7085
pulse 85
space 2903
</code></pre>

<p>If you don't, something is probably incorrectly configured. Triple check that you've connected everything properly and haven't crossed any wires. I highly recommend referring to the schematics I linked to above. There is also some trouble shooting advice in the RaspberryPi Forum thread I linked to above. Finally - you may want to do this in a dark room. I found that my desk lamp and overhead light would cause the IR receiver to think it was receiving valid signals.</p>

<h3>Testing the IR LED</h3>

<p>You're going to need to either find an existing LIRC config file for your remote control or use your IR receiver to generate a new LIRC config file. In my case I created a new LIRC config file. To do this, read the documentation on the <a href="http://www.lirc.org/html/irrecord.html">irrecord</a> application that comes with LIRC.</p>

<p>When using irrecord it will ask you to name the buttons you're programming as you program them. Be sure to run <code>irrecord --list-namespace</code> to see the valid names before you begin.</p>

<p>Here were the commands that I ran to generate a remote configuration file:</p>

<pre><code># Stop lirc to free up /dev/lirc0
sudo /etc/init.d/lirc stop

# Create a new remote control configuration file (using /dev/lirc0) and save the output to ~/lircd.conf
irrecord -d /dev/lirc0 ~/lircd.conf

# Make a backup of the original lircd.conf file
sudo mv /etc/lirc/lircd.conf /etc/lirc/lircd_original.conf

# Copy over your new configuration file
sudo cp ~/lircd.conf /etc/lirc/lircd.conf

# Start up lirc again
sudo /etc/init.d/lirc start
</code></pre>

<p>Once you've completed a remote configuration file and saved/added it to <code>/etc/lirc/lircd.conf</code> you can try testing the IR LED. We'll be using the <a href="http://www.lirc.org/html/irsend.html">irsend</a> application that comes with LIRC to facilitate sending commands. You'll definitely want to check out the documentation to learn more about the options <code>irsend</code> has.</p>

<p>Here are the commands I ran to test my IR LED (using the "yamaha" remote configuration file I created):</p>

<pre><code># List all of the commands that LIRC knows for 'yamaha'
irsend LIST yamaha ""

# Send the KEY_POWER command once
irsend SEND_ONCE yamaha KEY_POWER

# Send the KEY_VOLUMEDOWN command once
irsend SEND_ONCE yamaha KEY_VOLUMEDOWN
</code></pre>

<p>I tested that this was working by pointing the IR led at my Yamaha receiver and testing whether I could turn it on and adjust the volume.</p>

<h3>Success!</h3>

<p>That's it! You've now successfully installed and configured LIRC on your RaspberryPi. You can add additional remote control configuration files to your <code>/etc/lirc/lircd.conf</code> file to control multiple remotes.</p>

<h3>Resources</h3>

<p>Here's a few resources to explore if you'd like to learn more:</p>

<ul>
<li><a href="http://www.lirc.org">lirc</a> - LIRC home page</li>
<li><a href="http://aron.ws/projects/lirc_rpi/">RaspberryPi lirc_rpi GPIO driver</a> - ar0n's lirc_rpi page</li>
<li><a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=45&amp;t=7798&amp;start=100">LIRC GPIO driver for homebrew adapter</a></li>
<li><a href="http://www.ladyada.net/make/tvbgone/design.html">TV-B-Gone Schematic</a></li>
</ul>


<h3>My next steps</h3>

<p>The next step for my web controlled universal remote project is going to be finding or creating remote files for all of the IR devices in my house. Once I've gathered all of those files together and placed them in the <code>lircd.conf</code> file I'll begin work on the web application server.</p>

<p>I'll cover all of that in a future post.</p>

<h3>Questions? Comments?</h3>

<p>Please let me know if you have any questions or run into any trouble while running through these steps. All of these steps were tested and working on the date this post was published.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPi Quickstart]]></title>
    <link href="http://alexba.in/blog/2013/01/04/raspberrypi-quickstart/"/>
    <updated>2013-01-04T20:08:00-08:00</updated>
    <id>http://alexba.in/blog/2013/01/04/raspberrypi-quickstart</id>
    <content type="html"><![CDATA[<p>I recently had the opportunity to purchase and setup a second RaspberryPi system. Here's a very brief shopping list and collection of links to get your own RaspberryPi system setup.</p>

<h3>Parts List</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/B009SQQF9C/ref=oh_details_o01_s00_i01">RaspberryPi</a> - 512MB version</li>
<li><a href="http://www.amazon.com/gp/product/B008TCUXLW/ref=oh_details_o01_s01_i01">Enclosure for the RaspberryPi</a> - Clear and contains cutous for all of the ports + GPIO pins.</li>
<li><a href="http://www.amazon.com/gp/product/B003X26PMO/ref=oh_details_o01_s01_i02">WiFi Card</a> - Drivers are included in the latest Raspbian distribution.</li>
<li><a href="http://www.amazon.com/gp/product/B003VNKNEG/ref=oh_details_o01_s01_i03">8GB Class 10 SD card</a> - Class 10 cards have a fast read / write speed.</li>
<li><a href="http://www.amazon.com/gp/product/B003ES5ZSW/ref=oh_details_o01_s00_i00">USB A to USB MicroB cable</a> - The 'power cable' for the RaspberryPi</li>
<li><a href="http://www.amazon.com/gp/product/B005CG2ATQ/ref=oh_details_o01_s01_i00">USB power supply</a> - High powered USB power supply to drive the RaspberryPi + WiFi card.</li>
<li><a href="http://www.amazon.com/AmazonBasics-High-Speed-HDMI-Cable-Meters/dp/B003L1ZYYM">HDMI cable</a> - HDMI cable to connect to HDTV / monitor.</li>
</ul>


<h3>Setting up the SD card</h3>

<ol>
<li>Download the latest <a href="http://www.raspberrypi.org/downloads">Rasbian linux image</a>.</li>
<li>Setup the SD card by following the <a href="http://elinux.org/RPi_Easy_SD_Card_Setup">RPi Easy SD Card Setup</a> guide.</li>
</ol>


<h3>Booting it all up</h3>

<p>Plug everything in, boot up the system. If you're planning to SSH into the RaspberryPi via Ethernet (instead of using a keyboard/mouse/monitor) you'll have to log into your router and determine what it's IP address is.</p>

<h3>Setting up the WiFi</h3>

<p>Assuming everything booted up okay, you're ready to setup the wireless. To setup the wireless card to connect to your WPA/WPA2 secured wireless network, edit <code>/etc/network/interfaces</code> and add this to the bottom of the file. You may need to remove some existing configuration for <code>wlan0</code>.</p>

<pre><code>allow-hotplug wlan0
auto wlan0
iface wlan0 inet dhcp
    wpa-ssid YOUR_SSID
    wpa-psk YOUR_PASSWORD
</code></pre>

<p>Save this file, and run:</p>

<pre><code>sudo ifdown wlan0
sudo ifup wlan0
</code></pre>

<p>Run <code>ifconfig</code> and you should see that <code>wlan0</code> has an IP address.</p>

<h3>Setting up NTP</h3>

<p>Accurate time is useful.</p>

<pre><code>sudo apt-get install ntpdate
sudo ntpdate -u ntp.ubuntu.com
</code></pre>

<h3>Updating Raspbian OS</h3>

<p>After everything is setup you'll probably want to update Raspbian to the latest packages and version.</p>

<pre><code>sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade
</code></pre>

<h3>Updating the RaspberryPi's firmware</h3>

<p>To update the firmware to the latest version, we'll use <a href="https://www.github.com/Hexxeh/rpi-update">Hexxeh's rpi-update script</a>.</p>

<pre><code>sudo apt-get install git-core
sudo wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update &amp;&amp; sudo chmod +x /usr/bin/rpi-update
sudo rpi-update
</code></pre>

<h3>You're done!</h3>

<p>At this point you should be completely setup and operational.</p>

<p>If you had any troubles with this please let me know in the comments.</p>

<h3>More reading</h3>

<p>Here are some resources to do further reading:</p>

<ul>
<li><a href="http://elinux.org/RPi_Community">http://elinux.org/RPi_Community</a></li>
<li><a href="http://www.raspberrypi.org/phpBB3/">http://www.raspberrypi.org/phpBB3/</a></li>
<li>Should I add a link here? Let me know.</li>
</ul>

]]></content>
  </entry>
  
</feed>
